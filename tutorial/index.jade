.chapter(data-title='RingCentral for Swift Tutorial')
  .step(data-title='Welcome!', data-file='tutorial/config.json')
    h2 Call Analytics for iOS

    p This tutorial shows you how to build an iOS app to access RingCentral call logs data using the RingCentral Swift SDK.

    h2 Prerequisites

    li You must have a RingCentral developer account. If you don't have one, click here to create a free developer account
    li You need to have basic knowledge how to build an iOS app.

  .step(data-title='Let\'s start')
    :markdown
      ### Create a new iOS project
      Create a Single View app and give it a name “Call Analytics”.

      Open Terminal and browse to the “Call Analytics” folder and run the following command

      `$ brew install carthage`

      Create a Carthhage file and copy/paste the following line to the file

      'github "ringcentral/ringcentral-swift"'

      Now in Terminal window, run the command below:

      `$ carthage update --platform iOS`

  .step(data-title='Next step')
    :markdown
      ### Add RingCentral framework and it's dependencies to the project

      Open the iOS project in XCode and goto the project settings. Select General and from the “Embedded Binaries” section, click the + button and browse to the “Carthage/Build/iOS” folder under the project and add the frameworks to the project as shown below.

      ![](images/image00.png)

  .step(data-title='Next step', data-file='Call Analytics/Credentials.swift', data-highlight='9-13')
    :markdown
      ### Specify RingCentral app credentials
      Add a new file named “Credentials.swift” to the project. And specify the RingCentral AppKey and AppSecret.

  .step(data-title='Next step', data-file='Call Analytics/AppDelegate.swift', data-highlight='10-23')
    :markdown
      ### Create a RingCentral SDK instance
      Open the AppDelegate.swift file to define and initialize a RingCentral instance.

  .step(data-title='Next step', data-file='Call Analytics/Base.lproj/Main.storyboard', data-highlight='24-46')
    :markdown
      ## Create a login view
      ### Define a navigation bar
      Open the Main.storyboard then select the default View Controller and drag and drop a few UI components to make a Navigation Bar as shown below

      ![](images/image02.png)

  .step(data-title='Next step', data-file='Call Analytics/Base.lproj/Main.storyboard', data-highlight='68-94')
    :markdown
      ### Define a login form
      Then drag and drop a view container (UIView) and add 3 text fields (UITextField) as shown below

      ![](images/image03.png)

  .step(data-title='Next step', data-file='Call Analytics/Base.lproj/Main.storyboard', data-highlight='47-67')
    :markdown
      ### Define a menu button form
      Now drag and drop another view container (UIView) and add a button (UIButton) as shown below

      ![](images/image04.png)

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='15-20')
    :markdown
      ### Connect UIs to code
      Now click the Assistant button in the Xcode toolbar and connect the UI to code

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='52-82')
    :markdown
      ### Connect the Login button to code
      The login button is the right item on the Navigation bar

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='92-95')
    :markdown
      ### Connect the Call Logs button to code
      The "Call Logs" button is the button inside the menu button form.

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='52-82')
    :markdown
      ### Implement the rightNavBarBtnClicked function
      Inside the function, we implement code to login and logout and switch the view between login form and menu button form accordingly.

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='71-80')
    :markdown
      ### Login
      To login RingCentral account, we call the authorize function passing the username, password and the extension if it is provided.

      If login is successful, we toggle the view to show the menu button view and change the right navigation bar button text to "Logout" .

  .step(data-title='Next step', data-file='Call Analytics/ViewController.swift', data-highlight='53-59')
    :markdown
      ### Logout
      To logout, we call the revoke function and reset the access token, then toggle the view to show the login form and change the right navigation bar button text to "Login".

  .step(data-title='Next step')
    :markdown
      ### Create a CallInfoViewController
      First, we create a new file and select the Cocoa Touch class type and name it “CallInfoViewController”

      ![](images/image05.png)

      Next, open the Main.storyboard then drag and drop a new View Controller to the storyboard

      Now, click the Identity inspector then select the CallInfoViewController class and specify the Identity Storyboard ID as “calllogview”

  .step(data-title='Next step', data-file='html/image08.html')
    :markdown
      ### Add UI components to the view
      We need a navigation bar, an input view and an output view with various UI components as illustrated below

      ![](images/image06.png)

      We need an input form

      ![](images/image07.png)

      And we need an output view

      ![](images/image08.png)

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='16-26')
    :markdown
      ### Connect the input view UIs to code
      Now click the Assistant button in the Xcode toolbar and connect the UI to code

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='28-33')
    :markdown
      ### Connect the output view UIs to code
      Now click the Assistant button in the Xcode toolbar and connect the UI to code

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='35-38')
    :markdown
      ### Define values for pickers
      The valid values of input parameters are specified in RingCentral API reference.

      * 'direction' is the direction of a call as incoming call or outgoing call
      * 'type' is the type of a call as voice or fax call
      * 'transport' is the type of call service as PSTN or VoIP
      * 'view' is the direction of a call

      ![](images/image12.png)

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='272-296')
    :markdown
      ### Implement functions to collect user inputs
      We collect input and keep them in the calllogReq variable, then we call the calllog() function to fetch the call log data from RingCentral server

      ![](images/image12.png)

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='272-296')
    :markdown
      ### Implement the ReadBtnClicked function
      We collect input and keep them in the calllogReq variable, then we call the calllog() function to fetch the call log data from RingCentral server

      ![](images/image12.png)

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='284-292')
    :markdown
      ### Parse the call log response
      If the call was successful and we receive the response, we save the records array to the callLogRecords array and populate the data to the list view.

  .step(data-title='Next step', data-file='Call Analytics/CallInfoViewController.swift', data-highlight='203-263')
    :markdown
      ### Parse a call log record
      We parse each record and display record information on the list

      ![](images/image13.png)
